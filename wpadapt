#!/usr/bin/php -q
<?php

/*
 * Default vars
 */

$search = false;
$replace = false;
$source = false;
$destination = false;
$str_replace_function = 'str_replace';
$usage = <<<FOO

    usage: wpadapt [-i] -search=value -replace=value source_file target_file

    options:

      -search, -s     Required search term to replace.
                      e.g. -s=remote.domain.com

      -replace, -r    Required replacement value for the search term.
                      e.g. -r=local.domain.dev

      -i              Optional. Triggers a case-insensitive search/replace.

    examples:

      wpadapt -search=old.domain.com -replace=new.domain.dev remote_db.sql local_db.sql
      wpadapt -s=old.domain.com -f=new.domain.dev remote_db.sql local_db.sql
      wpadapt -s=OLD.DOMAIN.COM -f=new.domain.dev -i remote_db.sql local_db.sql


FOO;

/*
 * Show usage
 */

if (count($argv) === 1 || $argv[1] == '-h') {
  echo $usage;
  exit(0);
}

/*
 * Vars from args
 */

for($i = 1; $i < count($argv); $i++)
{
  $arg = $argv[$i];

  if (strpos($arg, '-search=') === 0) {
    $search = substr($arg, 8);
  }
 else if (strpos($arg, '-s=') === 0) {
    $search = substr($arg, 3);
  }
  else if (strpos($arg, '-replace=') === 0) {
    $replace = substr($arg, 9);
  }
  else if (strpos($arg, '-r=') === 0) {
    $replace = substr($arg, 3);
  }
  else if ( ! $source) {
    $source = $arg[0] == '/' ? $arg: getcwd() . '/' . $arg;
  }
  else if ( ! $destination) {
    $destination = $arg[0] == '/' ? $arg: getcwd() . '/' . $arg;
  }
  else if (strpos($arg, '-i')) {
    $str_replace_function = 'str_ireplace';
  }
}

/*
 * Validation
 */

if ( ! $search) {
  bye("ERROR: Please provide a `-search` argument, e.g. `-search=old.domain.com`");
}

if ( ! $replace) {
  bye("ERROR: Please provide a `-replace` argument, e.g. `-replace=new.domain.com`");
}

if ( ! $source) {
  bye("ERROR: Please provide a source file path. (First file path)");
}

if ( ! $destination) {
  bye("ERROR: Please provide a destination file path. (Second file path)");
}

if ( ! file_exists($source)) {
  bye("ERROR: The source file does not exist.\nPath: $source");
}

/*
 * Functions
 */

function line($text = '') {
  echo $text . "\n";
}

function bye($text)
{
  line($text . "\n");
  exit();
}

function replace_urls_in_serialized($search, $replace, $string)
{
  $replaced = preg_replace_callback('/s:(\d+):([\\]*[\'"])(.*?)\2;/s', 'replace_urls_callback', $string);
  return $replaced;
}

function replace_urls_callback($matches)
{
  global $str_replace_function;
  $replaced   = $str_replace_function('foo.bar.com', 'com.bar.foo', $matches[0]);
  $serialized = serialize($replaced);
  return $serialized;
}

function replace_urls_in_string($search, $replace, $string) 
{
  global $str_replace_function;
  return $str_replace_function($search, $replace, $string);
};

/*
 * Procedure
 */

line();

line("Load file: $source");
$fileContents = file_get_contents($source);
if ( ! $fileContents) {
  line("ERROR: Either the file does not exist or it is empty.");
  exit();
}

line("Search and replace in serialized data...");
$fileContents = replace_urls_in_serialized($search, $replace, $fileContents);

line("Search and replace everywhere else...");
$fileContents = replace_urls_in_string($search, $replace, $fileContents);

line("Write to destination: $destination");
file_put_contents($destination, $fileContents);

bye("Complete!");
